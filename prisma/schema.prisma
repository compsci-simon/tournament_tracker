// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["linux-musl-openssl-3.0.x", "native"]
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    email         String       @unique
    createdAt     DateTime     @default(now())
    name          String       @unique
    password      String       @default("866091acb5ff40f25f6d72b9ed3152c7dfb7fb605d5f39b4dec2a2e9f3e99202")
    nickName      String?
    avatar        String
    role          String       @default("player")
    gender        String
    tournaments   Tournament[]
    player1Games  Game[]       @relation("player1")
    player2Games  Game[]       @relation("player2")
    userGames     UserGame[]
    ratings       Rating[]
    trophies      Trophy[]
    accounts      Account[]
    sessions      Session[]
    emailVerified DateTime?
    image         String?
    Game          Game[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Trophy {
    id      String @id @default(cuid())
    holder  User   @relation(fields: [userId], references: [id])
    userId  String
    content String
}

model Rating {
    id           String   @id @default(cuid())
    time         DateTime @default(now())
    rating       Float
    player       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    game         Game?    @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId       String?
    ratingChange Float
}

model UserGame {
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId String

    @@id([userId, gameId])
}

// TODO: We need to remove the round field.
model Game {
    id                 String             @id @default(cuid())
    time               DateTime           @default(now())
    round              Int?
    Tournament         Tournament?        @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
    tournamentId       String?
    player1Points      Int                @default(0)
    player2Points      Int                @default(0)
    player1Id          String?
    player1            User?              @relation("player1", fields: [player1Id], references: [id])
    player2Id          String?
    player2            User?              @relation("player2", fields: [player2Id], references: [id])
    type               String             @default("group")
    level              Int?
    // The `group` field indicates the pool to which this game belongs
    poolId             String?
    lastModifiedTime   DateTime           @default(now())
    lastModifiedUserId String?
    lastModifiedUser   User?              @relation(fields: [userId], references: [id])
    ratings            Rating[]
    userGame           UserGame[]
    // nextRoundId is the ID of the next game, given this is a knockout game
    nextRoundId        String?
    notifications      GameNotification[]
    userId             String?
}

model Tournament {
    id             String         @id @default(cuid())
    type           String         @default("round-robbin")
    createdAt      DateTime       @default(now())
    startDate      DateTime
    roundInterval  String
    emailReminders Boolean
    numRounds      Int
    name           String
    isLocked       Boolean        @default(false)
    players        User[]
    games          Game[]
    TournamentJob  TournamentJob?
}

model TournamentJob {
    id           String     @id @default(cuid())
    tournament   Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String     @unique
}

model GameNotification {
    id            String  @id @default(cuid())
    game          Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId        String
    seenByPlayer1 Boolean @default(false)
    seenByPlayer2 Boolean @default(false)
    message       String
}
